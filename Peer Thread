import java.io.*;
import java.net.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.Map.Entry;

 /**class which handles continues connection with network to register a peer
*@reference: https://github.com/narnimah/Gnutella-Network/tree/master/src/aos_prj_2
*https://github.com/Arunjegarkal/Gnutella-style-peer-to-peer-P2P-file-sharing-system
*@author: Shilpa Benarji, Subramanya Prasad
*/
 public class Peer_Thread extends Thread{                                
	private BufferedReader buffer;                                                   
	public peerCommunicator connect;             
	private ServerSocket ser_soc;                       
	private Socket soc;                          
	
	public Peer_Thread(peerCommunicator connect, ServerSocket ser_soc)throws IOException{
		super();
		this.connect = connect;
		this.ser_soc = ser_soc;	
		start();
	}
	
	public void run(){  
	    Socket soc = null;                        
		try
		{
			while(true)
			{	
				soc = ser_soc.accept();	
				method1(connect, soc);                         //call = method1
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			try
			{
				if(soc!=null)
				{
					soc.close();
				}
			}catch(IOException e)
			{
				e.printStackTrace();
			}
		}
	}

	private static void method1(final peerCommunicator connect, final Socket soc) throws IOException {
		new Thread(new Runnable(){

			@Override
			public void run() {
				  //initialize_pThread.init_method1();          //method called to initalize all the variable of method1
				  
				  ObjectInputStream input = null;                 
                ObjectOutputStream output = null;                    
				String IP_addr = null;
                int port_num = -1;
                String cmd;
                MessageID mes;                            
				String fname;
                int TTL;  
				boolean flag = false;
                
                DateFormat date;
                String t;
                FileWriter wr = null;
			
                try {  
                	wr = new FileWriter("./peerLog.txt",true);   
                	
                    input = new ObjectInputStream(new BufferedInputStream(soc.getInputStream()));  
                    output = new ObjectOutputStream(soc.getOutputStream());  
  
                    Object read = input.readObject();      
                    Message msg = (Message)read;  
                    
                    cmd = msg.getCmd();
  
                    if("newquery".equals(cmd)){                       // handles query request
                    	
                    	date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            			t = date.format(new Date());
            			wr.write(t + "\t\tReceive: "+cmd + " " + msg.getMsg_ID().getSeqnum() + " " +msg.getfname()+" "
            					+ msg.getMsg_ID().getID_peer().p_no + "\t\n");     
                    
                    	mes = msg.getMsg_ID();
                    	TTL = msg.getTTL();
                    	fname = msg.getfname();
                    	
                    	if(TTL>0){
                    		TTL = TTL - 1;                   		
                    		
                    		connect.newquery(mes, fname, TTL);   
                    		flag = connect.srch(fname);      
                    		if(flag){
                    			System.out.println(fname+" found in "+P_info.srce.nList.p_no);    
                    			connect.newQueryHit(fname, mes, P_info.srce.nList.port_num, P_info.srce.nList.IP_addr, TTL);
                    			
                    			date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    			t = date.format(new Date());
                    			wr.write(t + "\t\tFile "+fname + " is found on " + P_info.srce.nList.p_no+"\r\n"); 
                    				
                    			
                    		}else{
                    			connect.newQueryHit(fname, mes, port_num, IP_addr, TTL);
                    		}
                    	}else{
                    		flag = connect.srch(fname);
                    		if(flag){
                    			
                    			date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    			t = date.format(new Date());
                    			wr.write(t + "\t\tFile "+fname + " is found on " + P_info.srce.nList.p_no+"\r\n"); 
                    			
                    			System.out.println(fname+" found in "+P_info.srce.nList.p_no);
                    			connect.newQueryHit(fname, mes, P_info.srce.nList.port_num, P_info.srce.nList.IP_addr, TTL);            			
                    		}else{
                    			connect.newQueryHit(fname, mes, port_num, IP_addr, TTL);
                    		}
                    	}
                    	
                    }else if("newQueryHit".equals(cmd)){        //handles forward hitquery request
                    	
                    	date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            			t = date.format(new Date());
            			wr.write(t + "\t\tReceive: "+cmd + " " + msg.getMsg_ID().getSeqnum() + " " +msg.getfname()+" "
            					+ msg.getMsg_ID().getID_peer().p_no + "\t\n");  
                    	
                    	TTL = msg.getTTL();
                    	
                    	if(TTL>=0){
                    		TTL = TTL - 1;
                    		connect.MessageSearch(msg, TTL);
                        		
                        }
                    	
                    }else if("download".equals(cmd)){           //handles download request
                    	fname = msg.getfname();
                    	String IP_peer = msg.getIP_peer();
                    	int Port_peer = msg.getPort();
                    	connect.FileTransfer(fname, IP_peer, Port_peer);
                    }
 
                    wr.close();
                } catch (IOException e) {  
                    e.printStackTrace();
                } catch(ClassNotFoundException e) {  
                    e.printStackTrace(); 
                } finally {  
                    try {  
                        input.close();  
                    } catch(Exception ex) {}  
                    try {  
                        output.close();  
                    } catch(Exception ex) {}  
                    try {  
                        soc.close();  
                    } catch(Exception ex) {}  
                }  
			}
			
		}).start();
	}
}
//class that handles iniatializing of variables associates with Peer_Thread 
class initialize_pThread {
	
	public static void init_method1()                     
	{
		        ObjectInputStream input = null;                 
                ObjectOutputStream output = null;                    
				String IP_addr = null;
                int port_num = -1;
                String cmd;
                MessageID mes;                            
				String fname;
                int TTL;  
				boolean flag = false;
                
                DateFormat date;
                String t;
                FileWriter wr = null;
	}
	
	public static void init_method2()   
	{
        int ln = 0;                                  
        double total = 0 ;  
        byte[] sbytes = null;  
        Socket soc = null;  
        DataOutputStream output_file = null;  
        FileInputStream input_file = null;  
        boolean flag = false;
     
        FileWriter wr = null;
	}
}
class method2 extends Thread{ 
 
      String fname = null;                                         //ReThread = method2
	  String IP_addr = null;
	  int port_num = 0;
	
	public method2(String IP_addr, String fname, int port_num){
	    this.IP_addr = IP_addr;
		this.fname = fname;
		this.port_num = port_num;
		start();
	}
	
	public void run(){

        int ln = 0;                                  
        double total = 0 ;  
        byte[] sbytes = null;  
        Socket soc = null;  
        DataOutputStream output_file = null;  
        FileInputStream input_file = null;  
        boolean flag = false;
     
        FileWriter wr = null; 
		
        
        try 
		{  
        	wr = new FileWriter("./peerLog.txt",true);       
        	
            File f = new File("./Files/" + fname); 
            long f_len = f.length();                     
            soc = new Socket(IP_addr,port_num);                
            output_file = new DataOutputStream(soc.getOutputStream());  
            input_file = new FileInputStream(f);        
            sbytes = new byte[1024];   
            
            while ((ln = input_file.read(sbytes, 0, sbytes.length)) > 0) 
			{  
                total += ln;               
                System.out.println("Percentage sent:"+((total/f_len)*100)+"%");
                output_file.write(sbytes, 0, ln);  
                output_file.flush();  
            }   
            
            if(total==f_len)
			{  
                flag = true;  
                DateFormat date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    			String t = date.format(new Date());
    			wr.write(t + "\t\tFile "+fname + " is received successfully!\r\n");
            } 
            
            wr.close();	
        }catch (Exception e) 
		{  
            System.out.println("Error");  
            flag = false;  
            e.printStackTrace();    
        }
		finally
		{    
            if (output_file != null)
				try 
				{
					output_file.close();
				} 
				catch (IOException e) 
				{
					e.printStackTrace();
				}  
            if (input_file != null)
				try 
				{
					input_file.close();
				} 
				catch (IOException e) 
				{
					e.printStackTrace();
				}     
            if (soc != null)
				try 
				{
					soc.close();
				} catch (IOException e) 
				{
					e.printStackTrace();
				}      
        }  
        System.out.println(flag?"Successful":"Failed");  
        
	}
}
